{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30715,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"mytuple = (\"apple\", \"banana\", \"cherry\")\nmyit = iter(mytuple)\n\nprint(next(myit))\nprint(next(myit))\nprint(next(myit))","metadata":{"execution":{"iopub.status.busy":"2024-06-04T14:53:00.973940Z","iopub.execute_input":"2024-06-04T14:53:00.974346Z","iopub.status.idle":"2024-06-04T14:53:01.010334Z","shell.execute_reply.started":"2024-06-04T14:53:00.974306Z","shell.execute_reply":"2024-06-04T14:53:01.009053Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"apple\nbanana\ncherry\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"An interator will go through a list of values one by one. Iterable objects include lists, strings, tuples, dictionaries, and sets. The example above iterates through a tuple.","metadata":{}},{"cell_type":"code","source":"mystr = \"banana\"\nmyit = iter(mystr)\n\nprint(next(myit))\nprint(next(myit))\nprint(next(myit))\nprint(next(myit))\nprint(next(myit))\nprint(next(myit))","metadata":{"execution":{"iopub.status.busy":"2024-06-04T14:53:54.014765Z","iopub.execute_input":"2024-06-04T14:53:54.015805Z","iopub.status.idle":"2024-06-04T14:53:54.021831Z","shell.execute_reply.started":"2024-06-04T14:53:54.015767Z","shell.execute_reply":"2024-06-04T14:53:54.020543Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"b\na\nn\na\nn\na\n","output_type":"stream"}]},{"cell_type":"markdown","source":"The example above iterates through a string.","metadata":{}},{"cell_type":"code","source":"\n\ndef calculator(op1, oper, op2):\n    op1=input(\"Enter operand 1: \")\n    oper=input(\"Enter the operator: \")\n    op2=input(\"Enter operand 2: \")\n    op1=int(op1)\n    op2=int(op2)\n    oper=str(oper)\n    if oper==\"+\":\n        result=op1+op2\n    if oper==\"-\":\n        result=op1-op2\n    if oper==\"*\":\n        result=op1*op2\n    if oper==\"/\":\n        result=op1/op2\n    print(result)\n    \ncalculator(1, '+', 2)","metadata":{"execution":{"iopub.status.busy":"2024-06-04T18:27:35.550759Z","iopub.execute_input":"2024-06-04T18:27:35.551172Z","iopub.status.idle":"2024-06-04T18:27:42.670147Z","shell.execute_reply.started":"2024-06-04T18:27:35.551141Z","shell.execute_reply":"2024-06-04T18:27:42.668999Z"},"trusted":true},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdin","text":"Enter operand 1:  1\nEnter the operator:  *\nEnter operand 2:  2\n"},{"name":"stdout","text":"2\n","output_type":"stream"}]},{"cell_type":"markdown","source":"Here is a calculator function in case it is needed.","metadata":{}},{"cell_type":"code","source":"mytuple=(\"Apple\",\"Banana\",\"Cherry\")\nfor x in mytuple:\n    print(x)","metadata":{"execution":{"iopub.status.busy":"2024-06-04T19:07:14.668480Z","iopub.execute_input":"2024-06-04T19:07:14.668929Z","iopub.status.idle":"2024-06-04T19:07:14.675075Z","shell.execute_reply.started":"2024-06-04T19:07:14.668896Z","shell.execute_reply":"2024-06-04T19:07:14.673922Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stdout","text":"Apple\nBanana\nCherry\n","output_type":"stream"}]},{"cell_type":"markdown","source":"Iterates through the tuple using a for loop","metadata":{}}]}